<?php
ini_set('display_errors',1);
$info = json_decode(
<<<SITEMAP
{
  "path": "CoCoEngine|Setup",
  "title": "Setup an instance of the CoCoMac database engine",
  "description": "This will install a web-interface to your MySQL database, with extensive and customizable search and browse facilities",
  "allow": {"admin":"*"}
}
SITEMAP
,TRUE);
$source = __DIR__.'/..';
$adminLogin = 'admin/adminLogin.php';
require_once($source.'/shared-lib/sitemap.php');
if (file_exists($source.'/'.$adminLogin)) {
  $siteMap = new siteMap_class($info,'../'.$adminLogin); // this will invoke the login script
  echo $siteMap->userInfo('i');
}  

function error($msg) {
  echo '<div class="error">Error: '.$msg.'</div>';
  return TRUE;
}

function done($msg) {
  echo '<div class="done">Done: '.$msg.'</div>';  
}

function nextStep($title) {
  echo '<h3 class="step"/>'.$title.'</h3>';
}

function stop($submitText) {
  if (isset($submitText)) {
    echo '<br/><input type="submit" value="'.$submitText.'">';
    echo '</form>';
  }
  echo '<p class="step"/><i>Consider to read the <a href="manual.html">manual</a></i></body></html>';
  exit(0);
}

function saveConfig($config,$configFile) {
  $config_json = "<?php\nexit(0)\n<<<CONFIG\n".formatAs_prettyJson($config)."\nCONFIG\n?>";
  $ok = @file_put_contents($configFile,$config_json);
  if (!$ok) { 
    return error('Cannot save configuration to file '.$configFile);
  }
}

function loadConfig($configFile) {
  $s = @file_get_contents($configFile);
  if (!$s) {
    error('Cannot read configuration file <tt>'.$configFile.'</tt>');
    stop('Retry');
  }
  $ok = preg_match('/^<<<CONFIG(.*)^CONFIG/ms',$s,$matches);
  if (!$ok) {
    error('Invalid configuration file format');
    stop('Retry');
  }
  return $matches[1];
}

function checkFormValues(&$config, $formFields,$request) {
  $ok = TRUE;
  $save = FALSE;
  foreach ($formFields as $f) {
    if ($f=='') continue;
    if (isset($request[$f])) {
      $config[$f] = $request[$f];
      $save = TRUE;
    }
    if (!isset($config[$f])) { echo 'A'.$f.'B'; $ok = FALSE; }
  }
  return array($ok,$save);
}

function displayForm($myForm,&$config,$configFile=NULL) {
  list($complete,$save) = checkFormValues($config, array_keys($myForm->fields),$_REQUEST);
  list($values,$err) = $myForm->validateInputs($config);
  $ready = $complete && count($err)==0;
  $s = $myForm->formAsTableRows($values);
  if ($ready) {
    if ($save && $configFile) {
      $err = saveConfig($config,$configFile);
    }
  } elseif (count($err)>0) {
    echo formatAs_prettyJson($err,TRUE);
  }
  echo '<table class="form">'.$s.'</table>';
  return array($values,$ready);
}

function installService($source,$target, $params) {
  $s = @file_get_contents($source);
  if (!isset($s)) return error('Cannot read from file '.$source);
  $params = array_change_key_case($params,CASE_UPPER);
  // make sure that single quotes are escaped
  $s = preg_replace('/###(\w*?)###/mse','str_replace("\'","\\\'",$params[\'$1\'])',$s);
  $s = "<?php\n/*\n * SCRIPT GENERATED FROM TEMPLATE BY SETUP SCRIPT.\n * DO NOT EDIT THIS FILE, EDIT THE TEMPLATE\n */\n?>".$s;
  $ok = file_put_contents($target,$s);
  if (!$ok) return error('Cannot write to file '.$target);
}
?>
<html><head>
<style type="text/css">
h3.step { border-left: 3px solid #888; padding-left: 10px }
div.error { color: red; font-weight: bold }
div.done { color: #080; font-weight: bold }
table.form { border-left: 1px solid #88F; margin: 4px 4px }
</style>
<script type="text/javascript" src="../shared-js/browser.js"></script>
</head>
<body>
<br/>This setup script is the latest addition to the engine and has been barely tested.
<br/>Please contact <a href="mailto:support@verysql.org">support</a> with your feedback. If reporting a failure, consider to include a screenshot.
<h1>CoCoMac Engine (CoCoEngine) setup wizard</h1>

<?php

// Private storage folder
nextStep('Private storage folder');
echo 'This setup script will install the CoCoEngine services in the web-accessible folder:';
echo '<br/><tt>'.$source.'</tt>.';
echo '<br/>Your settings will be stored in a configuration file <tt>config.php</tt>, stored in the <tt>./private</tt> folder.';
echo '<br/>The configuration file is disguised as a .php script to make it invisible to the outside world.';
echo '<br/>It is wise to change the default private folder to a folder that is inaccessible from the web.';
echo '<form action="setup.php">';
$ask = TRUE;
if (isset($_GET['private'])) {
  $private = $_GET['private'];
  $d = @dir($private);
  if ($d) {
    $ask = FALSE;
  } else {
    error('Invalid or inaccessible private folder "'.$private.'"');
  }
} else {
  $private = realpath($source.'/private');
}

if ($ask) {
  echo '<br/>Specify the private folder.';
  echo '<br/><input name="private" type="text" size="100" value="'.$private.'"/>';
  stop('Next...');
} else {
  done('Private folder set to "'.$private.'"');
  echo '<input name="private" type="hidden" value="'.$private.'">';
}

require_once($source.'/shared-lib/formatAs.php');
require_once($source.'/shared-lib/formfields.php');

// Configuration file
nextStep('Configuration file');
echo 'The next step is to create a file config.php in the private folder.';
$create = FALSE;
$configFile = $private.'/config.php';
if (file_exists($configFile)) {
  $configContents = @loadConfig($configFile);
  if (!$configContents) $create=TRUE;
} else {
  $create=TRUE;
}
$reset = isset($_GET['reset']) ? $_GET['reset'] : FALSE;
if ($create || $reset) {
  // create empty configuration file
  $config = array();
  $err = saveConfig($config,$configFile);
  if ($err) {
    echo 'Make sure that PHP has write permission in the private folder.';
    stop('Retry');
  } else {
    $configFile = realpath($configFile);
    done('Created empty configuration file <tt>'.$configFile.'</tt>');
  }
} else {
  done('Found existing configuration file <tt>'.$configFile.'</tt>');
  $config = json_decode($configContents,TRUE);
}

if (!is_array($config)) {
  error('Your configuration file does not contain a valid JSON-formatted array');
  echo '<p/>If you manually edited the file, please make sure that all keys and string values are enclosed in double quotes, and that all comma-separated lists of items do not have a comma after the last item.';
  echo '<br/>What to do: <select name="reset"><option value="0" selected>Correct the file manually</option><option value="1" >Clear the file contents (reset)</option></select>';
  echo stop('Retry');
}
$config['source_folder'] = realpath($source);
$config['private_folder'] = realpath($private);

echo '<br/><hr/>';
echo '<div><i>All settings below are stored in configuration file <tt>'.$configFile.'</tt></i></div>';
echo '<p/>';

// install the Admin Login Service 
$svc = $adminLogin = 'admin/adminLogin.php';
$err = installService($source.'/template/'.$svc,$source.'/'.$svc, $config);
if ($err) {
  error('Failed to install service <tt>'.$svc.'</tt>.');
  stop('Retry');
} else {
  done('Service <tt>'.$svc.'</tt> installed successfully.');
}

// install the SiteMap Service 
$svc = 'services/sitemap.php';
$err = installService($source.'/template/'.$svc,$source.'/'.$svc, $config);
if ($err) {
  error('Failed to install service <tt>'.$svc.'</tt>.');
  stop('Retry');
} else {
  done('Service <tt>'.$svc.'</tt> installed successfully.');
}

// Administrator password
nextStep('Administrator password');
if (isset($_REQUEST['admin_pwd'])) {
  $config['admin_pwd'] = $_REQUEST['admin_pwd'];
  saveConfig($config,$configFile);
}
if (isset($config['admin_pwd'])) {
  done('You provided an administrator password.');
  echo 'To change the administrator password, edit the configuration file directly.';
  echo '<p/>';
} else {
  list($complete,$save) = checkFormValues($config, array('admin_pwd'),$_REQUEST);
  if ($save) saveConfig($config,$configFile);
  $adminForm = new formfields_class();
  $ff = $adminForm->addField('admin_pwd',new pwdField_class('Administrator password'));
  $values = $config;
  $err = $adminForm->parseAndValidateInputs($values);
  if ($complete && count($err)>0) {
    echo formatAs_prettyJson($err,TRUE);
  }
  $s = $adminForm->formAsTableRows($values);
  echo '<table class="form">'.$s.'</table>';
  stop('Next...');
}

// Your project
nextStep('Project name');
$myForm = new formfields_class();
echo $myForm->headSection();
$ff = $myForm->addField('proj_name',new textField_class('Short name of your project (e.g. MyProject)'));
list($values,$ready) = displayForm($myForm,$config,$configFile);
if ($ready) {
  done('Your project name is "'.$values['proj_name'].'"');
} else { 
  stop('Submit &amp; Next');
}

// Connecting to the database
nextStep('Database connection');
echo 'Specify the parameters to connect to your database. They will be stored in plain text in your configuration file.';
echo '<br/>The read-only user should only have SELECT permission on the specified database.';

$myForm = new formfields_class();
$ff = $myForm->addField('db_host',new textField_class('Database host'));
$ff->setDefault('localhost');
$ff = $myForm->addField('db_name',new textField_class('Database name'));
$ff->setDefault($config['proj_name']);
$ff = $myForm->addField('db_user',new textField_class('Database user with full access'));
$ff = $myForm->addField('db_pwd',new pwdField_class('Password for the full access user'));
$ff->minLen = 0;
$ff->setDefault('');
$ff = $myForm->addField('db_user_ro',new textField_class('Database user with read-only access'));
$ff = $myForm->addField('db_pwd_ro',new pwdField_class('Password for the read-only user'));
$ff->minLen = 0;
$ff->setDefault('');
$ff = $myForm->addField('db_user_rw',new textField_class('Database user with read/write access'));
$ff = $myForm->addField('db_pwd_rw',new pwdField_class('Password for the read/write user'));
$ff->minLen = 0;
$ff->setDefault('');
list($values,$ready) = displayForm($myForm,$config,$configFile);
if ($ready) {
  done('Your database parameters are set');
} else {
  stop('Submit &amp; Next');
}

$db = @mysqli_connect($values['db_host'],$values['db_user'],$values['db_pwd'],$values['db_pwd']);
if ($db) {
  done('Connected to the database');
} else {
  error('Cannot connect to the database');
  stop('Submit &amp; Next');
}

require_once($source.'/shared-lib/dbQuery.php');
$rs = dbQuery_namedParameters($db,'SHOW DATABASES WHERE `Database`=$db',array('db'=>$config['db_name']));
if (!$rs) {
  error('Cannot use SHOW DATABASES; '.$db->error());
  stop('Submit &amp; Next');
}
$dbPresent = dbQuery_rs2scalar($rs);
if ($dbPresent) {
  done('Database '.$config['db_name'].' exists');
  echo '<br/>You need to tell CoCoEngine how the database is structured. This you do by means of a Database Definition File.';
  echo '<br/>If you do not have a DDF, CoCoEngine can populate one by analyzing your database contents.';
} else {
  nextStep('Create a new database');
  echo 'Your database '.$config['db_name'].' does not yet exist.';
  echo '<br/>CoCoEngine can create an empty database for you based on a Database Definition File (DDF).';
}
echo '<br/>The DDF is a JSON-formatted text file that defines the tables, fields and relations of your database.';
echo '<br/>See the <a href="manual.php">manual</a> for instructions on how to compose a DDF.';

$myForm = new formfields_class();
$db_ddf = $source.'/ddf/'.$config['db_name'].'.json';
if (!file_exists($db_ddf)) {
  $ddf = array('tables'=>array());
  $ok = @file_put_contents($db_ddf,formatAs_prettyJson($ddf));
  if ($ok) {
    $db_ddf = realpath($db_ddf);
    done('Created empty DDF at <tt>'.$db_ddf.'</tt>');
  } else {
    error('Cannot create DDF <tt>'.$db_ddf.'</tt>');
    stop('Retry...');
  }
}
$ff = $myForm->addField('db_ddf',new textField_class('Path to database definition file (fixed)'));
$ff->addAttr('size',80);
$ff->setDefault($source.'/ddf/'.$config['db_name'].'.json');
$ff->setReadOnly();
list($values,$ready) = displayForm($myForm,$config,$configFile);
if ($ready) {
  done('Database definition file set to '.$config['db_ddf']);
} else {
  stop('Submit &amp; Next');
}

$ddFile = $config['db_ddf'];
if (file_exists($ddFile)) {
  echo '<br/>The DDF "'.$ddFile.'" does exist.';
  echo '<br/>CoCoEngine contains no service yet to validate its contents.';
  if ($dbPresent) {
    // nothing to do
  } else {
    echo '<br/>CoCoEngine can create an empty database according to the DDF structure.';
    $myForm = new formfields_class();
    $ff = $myForm->addField('db_from_ddf',new selectField_class('Create database from DDF?',array(),array('0'=>'No','1'=>'Yes'),0));
    list($values,$ready) = displayForm($myForm,$config);
    if ($values['db_from_ddf'] == 1) {
      error('Implemented but not yet part of this script: create database from DDF');
    }
  }
} else {
  echo '<br/>The DDF "'.$ddFile.'" does not yet exist.';
  if ($dbPresent) {
    echo '<br/>CoCoEngine can try to parse it from the existing database. You can then edit the file based on the instructions in the <a href="manual.php">manual</a>.';
    $myForm = new formfields_class();
    $ff = $myForm->addField('ddf_parse',new selectField_class('Derive DDF from existing database?',array(),array('0'=>'No','1'=>'Yes'),0));
    list($values,$ready) = displayForm($myForm,$config);
    if ($values['ddf_parse'] == 1) {
      error('Implemented but not yet part of this script: derive DDF from database');
    }
  } else {
    echo '<br/>CoCoEngine can create an empty DDF file for you to edit, based on the instructions in the <a href="manual.php">manual</a>.';
    $myForm = new formfields_class();
    $ff = $myForm->addField('ddf_create',new selectField_class('Create empty DDF file?',array(),array('0'=>'No','1'=>'Yes'),0));
    list($values,$ready) = displayForm($myForm,$config);
    if ($values['ddf_create'] == 1) {
      error('Implemented but not yet part of this script: create empty DDF file');
    }
  }
}

// Install services
nextStep('Install services');
$svcPath = $source.'/services';
@mkdir($svcPath);
$svc = 'dbParams.php';
$err = installService($source.'/template/'.$svc,$private.'/'.$svc,$config);
if ($err) stop('Retry');
else done('Service '.$svc.' installed successfully.');

$serviceList = array(
  'custom_sql_query' => 'Custom SQL query',
  'search_wizard' => 'Search Wizard'
);
$comments = array(
  'custom_sql_query'=>'Caution: the custom SQL query service does not depend on the Database Definition File. It gives the user access to all tables and fields in your database'
);
$myForm = new formfields_class();
foreach ($serviceList as $svc=>$svcName) {
  if (isset($comments[$svc])) {
    $ff = $myForm->addField('',new commentField_class($comments[$svc]));
  }
  $ff = $myForm->addField($svc,new selectField_class($svcName,array(),array('0'=>'No, uninstall if exists','1'=>'Yes, install'),0));
}
list($values,$ready) = displayForm($myForm,$config,$configFile);
if (!$ready) {
  stop('Submit &amp; Next');
} else {
  foreach ($serviceList as $svc=>$svcName) {
    if ($values[$svc] == 1) {
      $err = installService($source.'/template/services/'.$svc.'.php',$source.'/services/'.$svc.'.php',$config);
      if ($err) stop('Retry');
      else done('Service '.$svcName.' installed successfully.');
    } elseif ($values[$svc] == 0) {
      done('Not implemented: Uninstall '.$svcName);
    }
  }
}
stop('Ready.');
?>